/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'

// Create Virtual Routes

const LayoutIndexLazyImport = createFileRoute('/_layout/')()
const LayoutIntegrationsLazyImport = createFileRoute('/_layout/integrations')()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexLazyRoute = LayoutIndexLazyImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./routes/_layout/index.lazy').then((d) => d.Route))

const LayoutIntegrationsLazyRoute = LayoutIntegrationsLazyImport.update({
  path: '/integrations',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout/integrations.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/integrations': {
      id: '/_layout/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof LayoutIntegrationsLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexLazyImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIntegrationsLazyRoute: typeof LayoutIntegrationsLazyRoute
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIntegrationsLazyRoute: LayoutIntegrationsLazyRoute,
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/integrations': typeof LayoutIntegrationsLazyRoute
  '/': typeof LayoutIndexLazyRoute
}

interface FileRoutesByTo {
  '/integrations': typeof LayoutIntegrationsLazyRoute
  '/': typeof LayoutIndexLazyRoute
}

interface FileRoutesById {
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/integrations': typeof LayoutIntegrationsLazyRoute
  '/_layout/': typeof LayoutIndexLazyRoute
}

interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/integrations' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/integrations' | '/'
  id: '/_layout' | '/_layout/integrations' | '/_layout/'
  fileRoutesById: FileRoutesById
}

interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/integrations",
        "/_layout/"
      ]
    },
    "/_layout/integrations": {
      "filePath": "_layout/integrations.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.lazy.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
